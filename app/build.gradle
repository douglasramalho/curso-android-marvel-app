apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'dagger.hilt.android.plugin'
apply plugin: "androidx.navigation.safeargs"
apply plugin: 'kotlin-parcelize'
apply plugin: 'com.google.firebase.crashlytics'

apply from: "$rootDir/config/detekt/detekt.gradle"

def apikeyPropertiesFile = rootProject.file("apikey.properties")
def apikeyProperties = new Properties()
apikeyProperties.load(new FileInputStream(apikeyPropertiesFile))

def storeKeyPropertiesFile = rootProject.file("storekey.properties")
def storeKeyProperties = new Properties()
storeKeyProperties.load(new FileInputStream(storeKeyPropertiesFile))

android {
    compileSdkVersion rootProject.ext.androidCompileSdkVersion

    signingConfigs {
        release {
            storeFile file(storeKeyProperties['FILE_KEY'])
            storePassword storeKeyProperties['STORE_KEY']
            keyAlias storeKeyProperties['ALIAS_KEY']
            keyPassword storeKeyProperties['STORE_KEY']
        }
    }

    defaultConfig {
        targetSdkVersion rootProject.ext.androidTargetSdkVersion
        minSdkVersion rootProject.ext.androidMinSdkVersion
        applicationId rootProject.ext.applicationId
        versionCode rootProject.ext.versionCode
        versionName rootProject.ext.versionName

        testInstrumentationRunner rootProject.ext.customTestRunner
        testInstrumentationRunnerArguments clearPackageData: 'true'

        buildConfigField "String", "PUBLIC_KEY", apikeyProperties['PUBLIC_KEY']
        buildConfigField "String", "PRIVATE_KEY", apikeyProperties['PRIVATE_KEY'] 
        buildConfigField "String", "BASE_URL", '"https://gateway.marvel.com/v1/public/"'
    }

    testOptions {
        execution 'ANDROIDX_TEST_ORCHESTRATOR'
        animationsDisabled = true
    }

    buildTypes {
        debug{
            applicationIdSuffix '.debug'
            debuggable = true
        }
        staging{
            initWith debug
            minifyEnabled true
            applicationIdSuffix '.staging'
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro',
                    'proguard-rules-staging.pro'
        }
        release {
            signingConfig signingConfigs.release
            minifyEnabled true
            shrinkResources = true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility rootProject.ext.javaVersion
        targetCompatibility rootProject.ext.javaVersion
    }
    kotlinOptions {
        jvmTarget = rootProject.ext.javaVersion
        freeCompilerArgs += ["-Xopt-in=kotlin.RequiresOptIn"]
    }

    buildFeatures {
        viewBinding true
    }
    namespace 'com.example.marvelapp'
}

dependencies {
    def presentationTestDependencies = rootProject.ext.presentationTestDependencies
    def presentationDependencies = rootProject.ext.presentationDependencies
    def masterTestDependencies = rootProject.ext.masterTestDependencies
    def masterDependencies = rootProject.ext.masterDependencies
    def commonDependencies = rootProject.ext.commonDependencies
    def dataDependencies = rootProject.ext.dataDependencies

    implementation project(rootProject.ext.modules.core)

    //Android
    implementation masterDependencies.coroutines_android
    implementation masterDependencies.constraintlayout
    implementation masterDependencies.androidCoreKtx
    implementation masterDependencies.legacySupport
    implementation masterDependencies.appcompat
    implementation masterDependencies.googleGms

    kapt(dataDependencies.roomCompiler) {
        exclude group: 'com.intellij', module: 'annotations'
    }
    implementation dataDependencies.roomRuntime
    implementation dataDependencies.roomKtx
    implementation dataDependencies.roomPaging

    // Libs
    implementation presentationDependencies.lifecycleViewmodel
    implementation presentationDependencies.navigationFragment
    implementation presentationDependencies.lifecycleLivedata
    implementation presentationDependencies.lifecycleRuntime
    implementation presentationDependencies.materialVersion
    implementation presentationDependencies.navigationUi
    implementation presentationDependencies.glideGlide
    implementation presentationDependencies.datastore
    implementation presentationDependencies.shimmer
    kapt presentationDependencies.glideCompiler

    //Firebase
    implementation platform(commonDependencies.firebaseBom)
    implementation commonDependencies.firebaseCrashlytics
    implementation commonDependencies.firebaseAnalytics
    implementation commonDependencies.firebaseDisplay
    implementation commonDependencies.firebaseConfig
    implementation commonDependencies.firebaseCore

    implementation presentationDependencies.paging
    implementation masterDependencies.hiltAndroid
    kapt masterDependencies.hiltCompiler

    // Tests
    androidTestImplementation presentationTestDependencies.espressoContrib
    androidTestImplementation presentationTestDependencies.mockWebServer
    androidTestImplementation presentationTestDependencies.espressoCore
    debugImplementation presentationTestDependencies.fragmentTest
    androidTestUtil presentationTestDependencies.orchestrator
    testImplementation project(":testing")

    androidTestImplementation masterTestDependencies.kotlinxCoroutinesTest
    androidTestImplementation masterTestDependencies.junitTestVersion
    androidTestImplementation masterTestDependencies.navigationTest
    androidTestImplementation masterTestDependencies.runnerTest
    androidTestImplementation masterTestDependencies.hiltTest
    kaptAndroidTest masterTestDependencies.hiltTestCompiler
    implementation masterTestDependencies.roomTesting

}
apply plugin: 'com.google.gms.google-services'